window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config", "modulename": "src.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config.channel_config", "modulename": "src.config.channel_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config.channel_config.ChannelConfig", "modulename": "src.config.channel_config", "qualname": "ChannelConfig", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.config.channel_config.ChannelConfig.__init__", "modulename": "src.config.channel_config", "qualname": "ChannelConfig.__init__", "kind": "function", "doc": "<p>Initializes a ChannelConfig object.</p>\n\n<p>Args:\n    channel_config (Dict[str, str]): A dictionary containing the channel configuration.</p>\n\n<p>Raises:\n    Exception: If the channel configuration is incomplete.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.config.channel_config.ChannelConfig.id", "modulename": "src.config.channel_config", "qualname": "ChannelConfig.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.config.channel_config.ChannelConfig.name", "modulename": "src.config.channel_config", "qualname": "ChannelConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.config.channel_config.ChannelConfig.description", "modulename": "src.config.channel_config", "qualname": "ChannelConfig.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.config.channel_config.ChannelConfig.broadcast_output_dir", "modulename": "src.config.channel_config", "qualname": "ChannelConfig.broadcast_output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.config.channel_config.ChannelConfig.streaming_output_dir", "modulename": "src.config.channel_config", "qualname": "ChannelConfig.streaming_output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.config.config_parser", "modulename": "src.config.config_parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config.config_parser.ConfigParser", "modulename": "src.config.config_parser", "qualname": "ConfigParser", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.config.config_parser.ConfigParser.path", "modulename": "src.config.config_parser", "qualname": "ConfigParser.path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;radio_config.json&#x27;"}, {"fullname": "src.config.config_parser.ConfigParser.get_config", "modulename": "src.config.config_parser", "qualname": "ConfigParser.get_config", "kind": "function", "doc": "<p>Get the radio configuration from the config file.</p>\n\n<p>Returns:\n    RadioConfig: The radio configuration object.</p>\n\n<p>Raises:\n    Exception: If the config file is not found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">radio_config</span><span class=\"o\">.</span><span class=\"n\">RadioConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.config.music_config", "modulename": "src.config.music_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config.music_config.logger", "modulename": "src.config.music_config", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.config.music_config (INFO)&gt;"}, {"fullname": "src.config.music_config.AIMusicConfig", "modulename": "src.config.music_config", "qualname": "AIMusicConfig", "kind": "class", "doc": "<p>Configuration class for AI music generation.</p>\n\n<p>Args:\n    generator_config (Dict[str, str]): A dictionary containing generator configuration parameters.</p>\n\n<p>Attributes:\n    output_dir (str): The output directory for the generated music.\n    num_tracks_to_combine (str): The number of tracks to combine.</p>\n\n<p>Raises:\n    Exception: If the algorithmic music configuration is incomplete.</p>\n"}, {"fullname": "src.config.music_config.AIMusicConfig.__init__", "modulename": "src.config.music_config", "qualname": "AIMusicConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">generator_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.config.music_config.AIMusicConfig.theme", "modulename": "src.config.music_config", "qualname": "AIMusicConfig.theme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.config.music_config.AIMusicConfig.num_tracks_to_combine", "modulename": "src.config.music_config", "qualname": "AIMusicConfig.num_tracks_to_combine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.config.music_config.AIMusicConfig.output_dir", "modulename": "src.config.music_config", "qualname": "AIMusicConfig.output_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.config.music_config.AlgorithmicMusicConfig", "modulename": "src.config.music_config", "qualname": "AlgorithmicMusicConfig", "kind": "class", "doc": "<p>Configuration class for algorithmic music generation.</p>\n\n<p>Args:\n    generator_config (Dict[str, str]): A dictionary containing generator configuration parameters.</p>\n\n<p>Attributes:\n    output_dir (str): The output directory for the generated music.\n    num_tracks_to_combine (str): The number of tracks to combine.</p>\n\n<p>Raises:\n    Exception: If the algorithmic music configuration is incomplete.</p>\n"}, {"fullname": "src.config.music_config.AlgorithmicMusicConfig.__init__", "modulename": "src.config.music_config", "qualname": "AlgorithmicMusicConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">generator_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.config.music_config.AlgorithmicMusicConfig.output_dir", "modulename": "src.config.music_config", "qualname": "AlgorithmicMusicConfig.output_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.config.music_config.AlgorithmicMusicConfig.num_tracks_to_combine", "modulename": "src.config.music_config", "qualname": "AlgorithmicMusicConfig.num_tracks_to_combine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.config.music_config.CustomMusicConfig", "modulename": "src.config.music_config", "qualname": "CustomMusicConfig", "kind": "class", "doc": "<p>Represents the configuration for custom music generation.</p>\n\n<p>Args:\n    generator_config (Dict[str, str]): A dictionary containing the generator configuration.</p>\n\n<p>Attributes:\n    output_dir (str): The output directory for the generated music.\n    num_tracks_to_combine (str): The number of tracks to combine.</p>\n\n<p>Raises:\n    Exception: If the custom music configuration is incomplete.</p>\n"}, {"fullname": "src.config.music_config.CustomMusicConfig.__init__", "modulename": "src.config.music_config", "qualname": "CustomMusicConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">generator_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.config.music_config.CustomMusicConfig.output_dir", "modulename": "src.config.music_config", "qualname": "CustomMusicConfig.output_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.config.music_config.CustomMusicConfig.num_tracks_to_combine", "modulename": "src.config.music_config", "qualname": "CustomMusicConfig.num_tracks_to_combine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.config.music_config.MusicConfig", "modulename": "src.config.music_config", "qualname": "MusicConfig", "kind": "class", "doc": "<p>Represents the configuration for music generators.</p>\n\n<p>Args:\n    music_config (Dict[str, str]): The configuration dictionary for music generators.</p>\n\n<p>Raises:\n    Exception: If the speaker configuration is incomplete or if the music generators are not specified as a list.</p>\n\n<p>Attributes:\n    ai_generators (List[AIMusicConfig]): A list of AI music generators configs.\n    algorithmic_generators (List[AlgorithmicMusicConfig]): A list of algorithmic music generators configs.\n    custom_generators (List[CustomMusicConfig]): A list of custom music generators configs.</p>\n"}, {"fullname": "src.config.music_config.MusicConfig.__init__", "modulename": "src.config.music_config", "qualname": "MusicConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">music_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.config.music_config.MusicConfig.ai_generators", "modulename": "src.config.music_config", "qualname": "MusicConfig.ai_generators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.config.music_config.AIMusicConfig]"}, {"fullname": "src.config.music_config.MusicConfig.algorithmic_generators", "modulename": "src.config.music_config", "qualname": "MusicConfig.algorithmic_generators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.config.music_config.AlgorithmicMusicConfig]"}, {"fullname": "src.config.music_config.MusicConfig.custom_generators", "modulename": "src.config.music_config", "qualname": "MusicConfig.custom_generators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.config.music_config.CustomMusicConfig]"}, {"fullname": "src.config.radio_config", "modulename": "src.config.radio_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config.radio_config.RadioConfig", "modulename": "src.config.radio_config", "qualname": "RadioConfig", "kind": "class", "doc": "<p>Represents the configuration for a radio.</p>\n\n<p>Args:\n    radio_config (Dict[str, any]): The dictionary containing the radio configuration.</p>\n\n<p>Attributes:\n    channels (Dict[int, ChannelConfig]): A dictionary of channel configurations, where the key is the channel ID and the value is the corresponding ChannelConfig object.</p>\n\n<p>Raises:\n    Exception: If the radio configuration is incomplete (i.e., no channels are defined).</p>\n"}, {"fullname": "src.config.radio_config.RadioConfig.__init__", "modulename": "src.config.radio_config", "qualname": "RadioConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">radio_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.config.radio_config.RadioConfig.channels", "modulename": "src.config.radio_config", "qualname": "RadioConfig.channels", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[int, src.config.channel_config.ChannelConfig]"}, {"fullname": "src.config.speaker_config", "modulename": "src.config.speaker_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.config.speaker_config.TTSEnum", "modulename": "src.config.speaker_config", "qualname": "TTSEnum", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.config.speaker_config.TTSEnum.ELEVENLABS", "modulename": "src.config.speaker_config", "qualname": "TTSEnum.ELEVENLABS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TTSEnum.ELEVENLABS: &#x27;ELEVENLABS&#x27;&gt;"}, {"fullname": "src.config.speaker_config.TTSEnum.PYTTSX3", "modulename": "src.config.speaker_config", "qualname": "TTSEnum.PYTTSX3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TTSEnum.PYTTSX3: &#x27;PYTTSX3&#x27;&gt;"}, {"fullname": "src.config.speaker_config.SpeakerConfig", "modulename": "src.config.speaker_config", "qualname": "SpeakerConfig", "kind": "class", "doc": "<p>Represents the configuration for a speaker.</p>\n\n<p>Args:\n    speaker_config (Dict[str, str]): A dictionary containing the speaker configuration.</p>\n\n<p>Attributes:\n    name (str): The name of the speaker.\n    TTS (TTSEnum): The text-to-speech engine used by the speaker.\n    voice (str): The voice used by the speaker.\n    personality (str): The personality of the speaker.\n    output_dir (str): The output directory for the speaker.</p>\n\n<p>Raises:\n    Exception: If any of the required attributes are missing in the speaker configuration.</p>\n"}, {"fullname": "src.config.speaker_config.SpeakerConfig.__init__", "modulename": "src.config.speaker_config", "qualname": "SpeakerConfig.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">speaker_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.config.speaker_config.SpeakerConfig.name", "modulename": "src.config.speaker_config", "qualname": "SpeakerConfig.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.config.speaker_config.SpeakerConfig.TTS", "modulename": "src.config.speaker_config", "qualname": "SpeakerConfig.TTS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.config.speaker_config.TTSEnum"}, {"fullname": "src.config.speaker_config.SpeakerConfig.voice", "modulename": "src.config.speaker_config", "qualname": "SpeakerConfig.voice", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.config.speaker_config.SpeakerConfig.personality", "modulename": "src.config.speaker_config", "qualname": "SpeakerConfig.personality", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.config.speaker_config.SpeakerConfig.output_dir", "modulename": "src.config.speaker_config", "qualname": "SpeakerConfig.output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.content_creator", "modulename": "src.content_creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.content_creator.content_creator", "modulename": "src.content_creator.content_creator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.content_creator.content_creator.ContentCreator", "modulename": "src.content_creator.content_creator", "qualname": "ContentCreator", "kind": "class", "doc": "<p>The ContentCreator class is responsible for creating content for radio channels.</p>\n\n<p>Attributes:\n    channels (List[Channel]): A list of Channel objects representing the radio channels.</p>\n\n<p>Methods:\n    __init__(config: RadioConfig): Initializes the ContentCreator object with the given RadioConfig object.</p>\n"}, {"fullname": "src.content_creator.content_creator.ContentCreator.__init__", "modulename": "src.content_creator.content_creator", "qualname": "ContentCreator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">radio_config</span><span class=\"o\">.</span><span class=\"n\">RadioConfig</span></span>)</span>"}, {"fullname": "src.content_creator.content_creator.ContentCreator.channels", "modulename": "src.content_creator.content_creator", "qualname": "ContentCreator.channels", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.channel.channel.Channel]", "default_value": "[&lt;src.channel.channel.Channel object&gt;, &lt;src.channel.channel.Channel object&gt;, &lt;src.channel.channel.Channel object&gt;]"}, {"fullname": "src.content_creator.content_creator_instance", "modulename": "src.content_creator.content_creator_instance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.content_creator.content_creator_instance.logger", "modulename": "src.content_creator.content_creator_instance", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.content_creator.content_creator_instance (INFO)&gt;"}, {"fullname": "src.content_creator.content_creator_instance.create_content_creator", "modulename": "src.content_creator.content_creator_instance", "qualname": "create_content_creator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;../radio_config.json&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">content_creator</span><span class=\"o\">.</span><span class=\"n\">content_creator</span><span class=\"o\">.</span><span class=\"n\">ContentCreator</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.content_creator.content_creator_instance.content_creator", "modulename": "src.content_creator.content_creator_instance", "qualname": "content_creator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.content_creator.content_creator.ContentCreator", "default_value": "&lt;src.content_creator.content_creator.ContentCreator object&gt;"}, {"fullname": "src.content_creator.content_creator_instance.reload_config", "modulename": "src.content_creator.content_creator_instance", "qualname": "reload_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.content_creator.router", "modulename": "src.content_creator.router", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.content_creator.router.logger", "modulename": "src.content_creator.router", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.content_creator.router (INFO)&gt;"}, {"fullname": "src.content_creator.router.router", "modulename": "src.content_creator.router", "qualname": "router", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;fastapi.routing.APIRouter object&gt;"}, {"fullname": "src.content_creator.router.reload_radio_config", "modulename": "src.content_creator.router", "qualname": "reload_radio_config", "kind": "function", "doc": "<p>Reloads the radio configuration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.content_creator.router.create_broadcast", "modulename": "src.content_creator.router", "qualname": "create_broadcast", "kind": "function", "doc": "<p>Creates a broadcast for each channel in the content_creator's channels list.</p>\n\n<p>Returns:\n    str: A string indicating the status of the operation (\"OK\").</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main", "modulename": "src.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.main.logger", "modulename": "src.main", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.main (INFO)&gt;"}, {"fullname": "src.main.app", "modulename": "src.main", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;fastapi.applications.FastAPI object&gt;"}, {"fullname": "src.music_generator", "modulename": "src.music_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.abstract_generator", "modulename": "src.music_generator.abstract_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.abstract_generator.logger", "modulename": "src.music_generator.abstract_generator", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.music_generator.abstract_generator (INFO)&gt;"}, {"fullname": "src.music_generator.abstract_generator.AbstractMusicGenerator", "modulename": "src.music_generator.abstract_generator", "qualname": "AbstractMusicGenerator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.abstract_generator.AbstractMusicGenerator.__init__", "modulename": "src.music_generator.abstract_generator", "qualname": "AbstractMusicGenerator.__init__", "kind": "function", "doc": "<p>Initializes the AbstractGenerator class.</p>\n\n<p>Args:\n    config (Config): The configuration object containing the generator settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "src.music_generator.abstract_generator.AbstractMusicGenerator.output_dir", "modulename": "src.music_generator.abstract_generator", "qualname": "AbstractMusicGenerator.output_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.abstract_generator.AbstractMusicGenerator.num_tracks_to_combine", "modulename": "src.music_generator.abstract_generator", "qualname": "AbstractMusicGenerator.num_tracks_to_combine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.abstract_generator.AbstractMusicGenerator.get_music", "modulename": "src.music_generator.abstract_generator", "qualname": "AbstractMusicGenerator.get_music", "kind": "function", "doc": "<p>Retrieves a list of music files to be used for generating music.</p>\n\n<p>Returns:\n    A list of file paths to the sampled music files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.abstract_generator.AbstractMusicGenerator.generate", "modulename": "src.music_generator.abstract_generator", "qualname": "AbstractMusicGenerator.generate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.ai_generator", "modulename": "src.music_generator.ai_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.ai_generator.ai_generator", "modulename": "src.music_generator.ai_generator.ai_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.ai_generator.ai_generator.logger", "modulename": "src.music_generator.ai_generator.ai_generator", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.music_generator.ai_generator.ai_generator (INFO)&gt;"}, {"fullname": "src.music_generator.ai_generator.ai_generator.AIGenerator", "modulename": "src.music_generator.ai_generator.ai_generator", "qualname": "AIGenerator", "kind": "class", "doc": "<p>A music generator that uses AI to generate music based on a given theme.</p>\n\n<p>Args:\n    config (AIMusicConfig): The configuration for the AI music generator.\n    max_new_tokens (int): The maximum number of new tokens to generate.</p>\n", "bases": "src.music_generator.abstract_generator.AbstractMusicGenerator"}, {"fullname": "src.music_generator.ai_generator.ai_generator.AIGenerator.__init__", "modulename": "src.music_generator.ai_generator.ai_generator", "qualname": "AIGenerator.__init__", "kind": "function", "doc": "<p>Initializes the AbstractGenerator class.</p>\n\n<p>Args:\n    config (Config): The configuration object containing the generator settings.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">music_config</span><span class=\"o\">.</span><span class=\"n\">AIMusicConfig</span>,</span><span class=\"param\">\t<span class=\"n\">max_new_tokens</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1152</span></span>)</span>"}, {"fullname": "src.music_generator.ai_generator.ai_generator.AIGenerator.theme", "modulename": "src.music_generator.ai_generator.ai_generator", "qualname": "AIGenerator.theme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.ai_generator.ai_generator.AIGenerator.max_new_tokens", "modulename": "src.music_generator.ai_generator.ai_generator", "qualname": "AIGenerator.max_new_tokens", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.ai_generator.ai_generator.AIGenerator.CACHE_DIR", "modulename": "src.music_generator.ai_generator.ai_generator", "qualname": "AIGenerator.CACHE_DIR", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.ai_generator.ai_generator.AIGenerator.generate", "modulename": "src.music_generator.ai_generator.ai_generator", "qualname": "AIGenerator.generate", "kind": "function", "doc": "<p>Generate music based on the given theme.</p>\n\n<p>Args:\n    n (int): The number of songs to generate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.algorithmic_generator", "modulename": "src.music_generator.algorithmic_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.algorithmic_generator", "modulename": "src.music_generator.algorithmic_generator.algorithmic_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.algorithmic_generator.logger", "modulename": "src.music_generator.algorithmic_generator.algorithmic_generator", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.music_generator.algorithmic_generator.algorithmic_generator (INFO)&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.algorithmic_generator.AlgorithmicGenerator", "modulename": "src.music_generator.algorithmic_generator.algorithmic_generator", "qualname": "AlgorithmicGenerator", "kind": "class", "doc": "<p>AlgorithmicGenerator is a class that generates music algorithmically based on predefined chord progressions.</p>\n\n<p>Args:\n    config (AlgorithmicMusicConfig): The configuration for the algorithmic music generator.</p>\n", "bases": "src.music_generator.abstract_generator.AbstractMusicGenerator"}, {"fullname": "src.music_generator.algorithmic_generator.algorithmic_generator.AlgorithmicGenerator.__init__", "modulename": "src.music_generator.algorithmic_generator.algorithmic_generator", "qualname": "AlgorithmicGenerator.__init__", "kind": "function", "doc": "<p>Initializes the AbstractGenerator class.</p>\n\n<p>Args:\n    config (Config): The configuration object containing the generator settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">music_config</span><span class=\"o\">.</span><span class=\"n\">AlgorithmicMusicConfig</span></span>)</span>"}, {"fullname": "src.music_generator.algorithmic_generator.algorithmic_generator.AlgorithmicGenerator.generate", "modulename": "src.music_generator.algorithmic_generator.algorithmic_generator", "qualname": "AlgorithmicGenerator.generate", "kind": "function", "doc": "<p>Generates a specified number of songs algorithmically.</p>\n\n<p>Args:\n    n (int): The number of songs to generate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.algorithmic_generator.utils", "modulename": "src.music_generator.algorithmic_generator.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.logger", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.music_generator.algorithmic_generator.utils (INFO)&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.errors", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "errors", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;notes&#x27;: &#x27;Bad input :(\\n&#x27;, &#x27;length&#x27;: &#x27;Incorrect length of the input list\\n&#x27;}"}, {"fullname": "src.music_generator.algorithmic_generator.utils.NOTES", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "NOTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;C&#x27;, &#x27;C#&#x27;, &#x27;D&#x27;, &#x27;Eb&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;F#&#x27;, &#x27;G&#x27;, &#x27;Ab&#x27;, &#x27;A&#x27;, &#x27;Bb&#x27;, &#x27;B&#x27;]"}, {"fullname": "src.music_generator.algorithmic_generator.utils.OCTAVES", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "OCTAVES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}, {"fullname": "src.music_generator.algorithmic_generator.utils.NOTES_IN_OCTAVE", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "NOTES_IN_OCTAVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "12"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano.Acoustic_Grand", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano.Acoustic_Grand", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Piano.Acoustic_Grand: 0&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano.Bright_Acoustic", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano.Bright_Acoustic", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Piano.Bright_Acoustic: 1&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano.Electric_Grand", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano.Electric_Grand", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Piano.Electric_Grand: 2&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano.Honkytonk", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano.Honkytonk", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Piano.Honkytonk: 3&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano.Rhodes", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano.Rhodes", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Piano.Rhodes: 4&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano.Chorused", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano.Chorused", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Piano.Chorused: 5&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano.Harpsichord", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano.Harpsichord", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Piano.Harpsichord: 6&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Piano.Clavinet", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Piano.Clavinet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Piano.Clavinet: 7&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion.Celesta", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion.Celesta", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chromatic_Percussion.Celesta: 8&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion.Glockenspiel", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion.Glockenspiel", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chromatic_Percussion.Glockenspiel: 9&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion.Music_box", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion.Music_box", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chromatic_Percussion.Music_box: 10&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion.Vibraphone", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion.Vibraphone", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chromatic_Percussion.Vibraphone: 11&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion.Marimba", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion.Marimba", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chromatic_Percussion.Marimba: 12&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion.Xylophone", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion.Xylophone", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chromatic_Percussion.Xylophone: 13&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion.Tubular_Bells", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion.Tubular_Bells", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chromatic_Percussion.Tubular_Bells: 14&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Chromatic_Percussion.Dulcimer", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Chromatic_Percussion.Dulcimer", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Chromatic_Percussion.Dulcimer: 15&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ.Hammond", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ.Hammond", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Organ.Hammond: 16&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ.Percussive", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ.Percussive", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Organ.Percussive: 17&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ.Rock", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ.Rock", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Organ.Rock: 18&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ.Church", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ.Church", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Organ.Church: 19&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ.Reed", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ.Reed", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Organ.Reed: 20&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ.Accordion", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ.Accordion", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Organ.Accordion: 21&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ.Harmonica", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ.Harmonica", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Organ.Harmonica: 22&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Organ.Tango_Accordion", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Organ.Tango_Accordion", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Organ.Tango_Accordion: 23&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar.Acoustic_Nylon", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar.Acoustic_Nylon", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Guitar.Acoustic_Nylon: 24&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar.Acoustic_Steel", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar.Acoustic_Steel", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Guitar.Acoustic_Steel: 25&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar.Electric_Jazz", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar.Electric_Jazz", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Guitar.Electric_Jazz: 26&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar.Electric_Clean", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar.Electric_Clean", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Guitar.Electric_Clean: 27&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar.Electric_Muted", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar.Electric_Muted", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Guitar.Electric_Muted: 28&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar.Overdriven", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar.Overdriven", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Guitar.Overdriven: 29&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar.Distortion", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar.Distortion", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Guitar.Distortion: 30&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Guitar.Harmonics", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Guitar.Harmonics", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Guitar.Harmonics: 31&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass.Acoustic", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass.Acoustic", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Bass.Acoustic: 32&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass.Electric_Finger", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass.Electric_Finger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Bass.Electric_Finger: 33&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass.Electric_Pick", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass.Electric_Pick", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Bass.Electric_Pick: 34&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass.Fretless", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass.Fretless", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Bass.Fretless: 35&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass.Slap_1", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass.Slap_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Bass.Slap_1: 36&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass.Slap_2", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass.Slap_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Bass.Slap_2: 37&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass.Synth_1", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass.Synth_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Bass.Synth_1: 38&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Bass.Synth_2", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Bass.Synth_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Bass.Synth_2: 39&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings.Violin", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings.Violin", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Strings.Violin: 40&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings.Viola", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings.Viola", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Strings.Viola: 41&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings.Cello", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings.Cello", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Strings.Cello: 42&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings.Contrabass", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings.Contrabass", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Strings.Contrabass: 43&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings.Tremolo", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings.Tremolo", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Strings.Tremolo: 44&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings.Pizzicato", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings.Pizzicato", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Strings.Pizzicato: 45&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings.Orchestral_Harp", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings.Orchestral_Harp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Strings.Orchestral_Harp: 46&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Strings.Timpani", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Strings.Timpani", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Strings.Timpani: 47&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble.String_1", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble.String_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ensemble.String_1: 48&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble.String_Ensemble_2", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble.String_Ensemble_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ensemble.String_Ensemble_2: 49&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble.Synth_1", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble.Synth_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ensemble.Synth_1: 50&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble.Synth_2", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble.Synth_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ensemble.Synth_2: 51&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble.Choir_Aahs", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble.Choir_Aahs", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ensemble.Choir_Aahs: 52&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble.Voice_Oohs", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble.Voice_Oohs", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ensemble.Voice_Oohs: 53&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble.Synth_Voice", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble.Synth_Voice", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ensemble.Synth_Voice: 54&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ensemble.Orchestra_Hit", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ensemble.Orchestra_Hit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ensemble.Orchestra_Hit: 55&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass.Trumpet", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass.Trumpet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Brass.Trumpet: 56&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass.Trombone", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass.Trombone", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Brass.Trombone: 57&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass.Tuba", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass.Tuba", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Brass.Tuba: 58&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass.Muted_Trumpet", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass.Muted_Trumpet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Brass.Muted_Trumpet: 59&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass.French_Horn", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass.French_Horn", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Brass.French_Horn: 60&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass.Brass_Section", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass.Brass_Section", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Brass.Brass_Section: 61&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass.Synth_1", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass.Synth_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Brass.Synth_1: 62&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Brass.Synth_2", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Brass.Synth_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Brass.Synth_2: 63&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed.Soprano_Sax", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed.Soprano_Sax", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Reed.Soprano_Sax: 64&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed.Alto_Sax", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed.Alto_Sax", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Reed.Alto_Sax: 65&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed.Tenor_Sax", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed.Tenor_Sax", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Reed.Tenor_Sax: 66&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed.Baritone_Sax", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed.Baritone_Sax", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Reed.Baritone_Sax: 67&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed.Oboe", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed.Oboe", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Reed.Oboe: 68&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed.English_Horne", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed.English_Horne", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Reed.English_Horne: 69&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed.Bassoon", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed.Bassoon", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Reed.Bassoon: 70&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Reed.Clarinet", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Reed.Clarinet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Reed.Clarinet: 71&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe.Piccolo", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe.Piccolo", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pipe.Piccolo: 72&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe.Flute", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe.Flute", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pipe.Flute: 73&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe.Recorder", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe.Recorder", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pipe.Recorder: 74&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe.Pan_Flute", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe.Pan_Flute", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pipe.Pan_Flute: 75&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe.Bottle_Blow", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe.Bottle_Blow", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pipe.Bottle_Blow: 76&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe.Shakuhachi", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe.Shakuhachi", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pipe.Shakuhachi: 77&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe.Whistle", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe.Whistle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pipe.Whistle: 78&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Pipe.Ocarina", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Pipe.Ocarina", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Pipe.Ocarina: 79&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead.Square", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead.Square", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Lead.Square: 80&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead.Sawtooth", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead.Sawtooth", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Lead.Sawtooth: 81&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead.Calliope_Lead", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead.Calliope_Lead", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Lead.Calliope_Lead: 82&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead.Chiffer_Lead", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead.Chiffer_Lead", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Lead.Chiffer_Lead: 83&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead.Charang", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead.Charang", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Lead.Charang: 84&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead.Voice", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead.Voice", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Lead.Voice: 85&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead.Fifths", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead.Fifths", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Lead.Fifths: 86&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Lead.Brass_And_Lead", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Lead.Brass_And_Lead", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Lead.Brass_And_Lead: 87&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad.New_Age", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad.New_Age", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Pad.New_Age: 88&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad.Warm", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad.Warm", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Pad.Warm: 89&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad.Polysynth", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad.Polysynth", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Pad.Polysynth: 90&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad.Choir", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad.Choir", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Pad.Choir: 91&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad.Bowed", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad.Bowed", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Pad.Bowed: 92&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad.Metallic", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad.Metallic", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Pad.Metallic: 93&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad.Halo", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad.Halo", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Pad.Halo: 94&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Synth_Pad.Sweep", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Synth_Pad.Sweep", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Synth_Pad.Sweep: 95&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX.Rain", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX.Rain", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FX.Rain: 96&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX.Soundtrack", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX.Soundtrack", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FX.Soundtrack: 97&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX.Crystal", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX.Crystal", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FX.Crystal: 98&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX.Atmosphhere", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX.Atmosphhere", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FX.Atmosphhere: 99&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX.Brightmess", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX.Brightmess", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FX.Brightmess: 100&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX.Goblins", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX.Goblins", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FX.Goblins: 101&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX.Echoes", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX.Echoes", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FX.Echoes: 102&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.FX.Sci_Fi", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.FX.Sci_Fi", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;FX.Sci_Fi: 103&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic.Sitar", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic.Sitar", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ethnic.Sitar: 104&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic.Banjo", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic.Banjo", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ethnic.Banjo: 105&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic.Shamisen", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic.Shamisen", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ethnic.Shamisen: 106&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic.Koto", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic.Koto", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ethnic.Koto: 107&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic.Kalimba", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic.Kalimba", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ethnic.Kalimba: 108&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic.Bagpipe", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic.Bagpipe", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ethnic.Bagpipe: 109&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic.Fiddle", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic.Fiddle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ethnic.Fiddle: 110&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Ethnic.Shana", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Ethnic.Shana", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Ethnic.Shana: 111&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive.Tinkle_Bell", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive.Tinkle_Bell", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Percussive.Tinkle_Bell: 112&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive.Agogo", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive.Agogo", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Percussive.Agogo: 113&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive.Steel_Drums", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive.Steel_Drums", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Percussive.Steel_Drums: 114&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive.Woodblock", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive.Woodblock", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Percussive.Woodblock: 115&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive.Taiko_Drum", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive.Taiko_Drum", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Percussive.Taiko_Drum: 116&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive.Melodic_Tom", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive.Melodic_Tom", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Percussive.Melodic_Tom: 117&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive.Synth_Drum", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive.Synth_Drum", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Percussive.Synth_Drum: 118&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Percussive.Reverse_Cymbal", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Percussive.Reverse_Cymbal", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Percussive.Reverse_Cymbal: 119&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects.Guitar_Fret_Noise", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects.Guitar_Fret_Noise", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Sound_Effects.Guitar_Fret_Noise: 120&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects.Breath_Noise", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects.Breath_Noise", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Sound_Effects.Breath_Noise: 121&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects.Seashore", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects.Seashore", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Sound_Effects.Seashore: 122&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects.Bird_Tweet", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects.Bird_Tweet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Sound_Effects.Bird_Tweet: 123&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects.Telephone_Ring", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects.Telephone_Ring", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Sound_Effects.Telephone_Ring: 124&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects.Helicopter", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects.Helicopter", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Sound_Effects.Helicopter: 125&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects.Applause", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects.Applause", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Sound_Effects.Applause: 126&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Instruments.Sound_Effects.Gunshot", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Instruments.Sound_Effects.Gunshot", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Sound_Effects.Gunshot: 127&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Duration", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Duration", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Duration.Whole", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Duration.Whole", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Duration.Whole: 4&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Duration.Half", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Duration.Half", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Duration.Half: 2&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Duration.Quarter", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Duration.Quarter", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Duration.Quarter: 1&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Duration.Eighth", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Duration.Eighth", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Duration.Eighth: 0.5&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Duration.Sixteenth", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Duration.Sixteenth", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Duration.Sixteenth: 0.25&gt;"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Note", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Note", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Note.NOTES", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Note.NOTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;C&#x27;, &#x27;C#&#x27;, &#x27;D&#x27;, &#x27;Eb&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;F#&#x27;, &#x27;G&#x27;, &#x27;Ab&#x27;, &#x27;A&#x27;, &#x27;Bb&#x27;, &#x27;B&#x27;]"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Note.OCTAVES", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Note.OCTAVES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Note.NOTES_IN_OCTAVE", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Note.NOTES_IN_OCTAVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "12"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Note.pitch", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Note.pitch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Note.octave", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Note.octave", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Note.duration", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Note.duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Note.note_to_number", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Note.note_to_number", "kind": "function", "doc": "<p>Returns numeric value of note as specified in midi format. Pauses (empty) notes are treated as -1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Melody", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Melody", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Melody.notes", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Melody.notes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Melody.track", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Melody.track", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Melody.channel", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Melody.channel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Melody.volume", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Melody.volume", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Melody.start_time", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Melody.start_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Melody.chords_to_notes", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Melody.chords_to_notes", "kind": "function", "doc": "<p>Encode list of chords as notes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chord_progression</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">onlyFirst</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.algorithmic_generator.utils.Melody.notes_to_midi", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "Melody.notes_to_midi", "kind": "function", "doc": "<p>Save the sequence of notes in the MIDI file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">midiutil</span><span class=\"o\">.</span><span class=\"n\">MidiFile</span><span class=\"o\">.</span><span class=\"n\">MIDIFile</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.algorithmic_generator.utils.chords_to_notes", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "chords_to_notes", "kind": "function", "doc": "<p>Encode list of chords as notes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chord_progression</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">onlyFirst</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.algorithmic_generator.utils.notes_to_midi", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "notes_to_midi", "kind": "function", "doc": "<p>Save the sequence of notes in the MIDI file</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">midiutil</span><span class=\"o\">.</span><span class=\"n\">MidiFile</span><span class=\"o\">.</span><span class=\"n\">MIDIFile</span>,</span><span class=\"param\">\t<span class=\"n\">array_of_notes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">notes_duration</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">octave</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">track</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">volume</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.algorithmic_generator.utils.save_midi_as_mp3", "modulename": "src.music_generator.algorithmic_generator.utils", "qualname": "save_midi_as_mp3", "kind": "function", "doc": "<p>Convert the MIDI file to an MP3 file and save on disk, then delete the MIDI file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">midi_file</span><span class=\"p\">:</span> <span class=\"n\">midiutil</span><span class=\"o\">.</span><span class=\"n\">MidiFile</span><span class=\"o\">.</span><span class=\"n\">MIDIFile</span>,</span><span class=\"param\">\t<span class=\"n\">midi_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">mp3_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.custom_generator", "modulename": "src.music_generator.custom_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.custom_generator.custom_generator", "modulename": "src.music_generator.custom_generator.custom_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.custom_generator.custom_generator.CustomGenerator", "modulename": "src.music_generator.custom_generator.custom_generator", "qualname": "CustomGenerator", "kind": "class", "doc": "<p>A custom music generator that extends the AbstractMusicGenerator class.</p>\n\n<p>Args:\n    config (CustomMusicConfig): The configuration object for the custom generator.</p>\n", "bases": "src.music_generator.abstract_generator.AbstractMusicGenerator"}, {"fullname": "src.music_generator.custom_generator.custom_generator.CustomGenerator.__init__", "modulename": "src.music_generator.custom_generator.custom_generator", "qualname": "CustomGenerator.__init__", "kind": "function", "doc": "<p>Initializes the AbstractGenerator class.</p>\n\n<p>Args:\n    config (Config): The configuration object containing the generator settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">music_config</span><span class=\"o\">.</span><span class=\"n\">CustomMusicConfig</span></span>)</span>"}, {"fullname": "src.music_generator.custom_generator.custom_generator.CustomGenerator.generate", "modulename": "src.music_generator.custom_generator.custom_generator", "qualname": "CustomGenerator.generate", "kind": "function", "doc": "<p>Is not implemented, since custom music doesnt need to be generated.\nIt can only be retrieved, if it exists.</p>\n\n<p>Raises:\n    NotImplementedError: This method is not implemented in the base class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.music_generator", "modulename": "src.music_generator.music_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.music_generator.MusicGenerator", "modulename": "src.music_generator.music_generator", "qualname": "MusicGenerator", "kind": "class", "doc": "<p>Class representing a music generator that combines AI, algorithmic, and custom generators.</p>\n\n<p>Args:\n    config (MusicConfig): The configuration object containing the settings for the generators.</p>\n"}, {"fullname": "src.music_generator.music_generator.MusicGenerator.__init__", "modulename": "src.music_generator.music_generator", "qualname": "MusicGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">music_config</span><span class=\"o\">.</span><span class=\"n\">MusicConfig</span></span>)</span>"}, {"fullname": "src.music_generator.music_generator.MusicGenerator.ai_generators", "modulename": "src.music_generator.music_generator", "qualname": "MusicGenerator.ai_generators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.music_generator.ai_generator.ai_generator.AIGenerator]"}, {"fullname": "src.music_generator.music_generator.MusicGenerator.algorithmic_generators", "modulename": "src.music_generator.music_generator", "qualname": "MusicGenerator.algorithmic_generators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.music_generator.algorithmic_generator.algorithmic_generator.AlgorithmicGenerator]"}, {"fullname": "src.music_generator.music_generator.MusicGenerator.custom_generators", "modulename": "src.music_generator.music_generator", "qualname": "MusicGenerator.custom_generators", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[src.music_generator.custom_generator.custom_generator.CustomGenerator]"}, {"fullname": "src.music_generator.music_generator.MusicGenerator.generate_music", "modulename": "src.music_generator.music_generator", "qualname": "MusicGenerator.generate_music", "kind": "function", "doc": "<p>Generates music using all the available generators.</p>\n\n<p>Args:\n    n (int): The number of music files to generate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.music_generator.MusicGenerator.get_music", "modulename": "src.music_generator.music_generator", "qualname": "MusicGenerator.get_music", "kind": "function", "doc": "<p>Returns a list of music files generated by all the generators.</p>\n\n<p>Returns:\n    List[str]: List of music file paths.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.router", "modulename": "src.music_generator.router", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.music_generator.router.logger", "modulename": "src.music_generator.router", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.music_generator.router (INFO)&gt;"}, {"fullname": "src.music_generator.router.router", "modulename": "src.music_generator.router", "qualname": "router", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;fastapi.routing.APIRouter object&gt;"}, {"fullname": "src.music_generator.router.generate_music", "modulename": "src.music_generator.router", "qualname": "generate_music", "kind": "function", "doc": "<p>Generate music for all channels.</p>\n\n<p>Args:\n    n (int): Number of music pieces to generate for each channel.</p>\n\n<p>Returns:\n    str: A string indicating the success of the operation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.music_generator.router.generate_music_for_channel", "modulename": "src.music_generator.router", "qualname": "generate_music_for_channel", "kind": "function", "doc": "<p>Generate music for a specific channel.</p>\n\n<p>Args:\n    n (int): The number of music pieces to generate.\n    channel (int): The channel number.</p>\n\n<p>Returns:\n    str: A string indicating the status of the operation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.speaker", "modulename": "src.speaker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail", "modulename": "src.speaker.gmail", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.authenticaion_service", "modulename": "src.speaker.gmail.authenticaion_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.authenticaion_service.logger", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger", "default_value": "&lt;Logger src.speaker.gmail.authenticaion_service (INFO)&gt;"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService", "kind": "class", "doc": "<p>This class handles authentication and authorization for Gmail API.</p>\n"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.__init__", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.__init__", "kind": "function", "doc": "<p>Initializes the AuthenticationService.</p>\n\n<p>Args:\n    secrets_file (str): The path to the client secrets file.\n    scopes (List[str]): The list of scopes required for authorization.\n    redirect_uri (str): The redirect URI for the OAuth flow.\n    token_file (Path): The path to the token file where credentials will be saved.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">secrets_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scopes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">redirect_uri</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">token_file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span>)</span>"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.token_file", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.token_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.scopes", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.scopes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.flow", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.flow", "kind": "variable", "doc": "<p></p>\n", "annotation": ": google_auth_oauthlib.flow.Flow"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.callback_handler", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.callback_handler", "kind": "function", "doc": "<p>Handles the callback from the authorization flow.</p>\n\n<p>Args:\n    request (Request): The HTTP request object containing the authorization response.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">starlette</span><span class=\"o\">.</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.get_credentials", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.get_credentials", "kind": "function", "doc": "<p>Retrieves the credentials.</p>\n\n<p>Returns:\n    Credentials: The credentials object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">oauth2</span><span class=\"o\">.</span><span class=\"n\">credentials</span><span class=\"o\">.</span><span class=\"n\">Credentials</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.refresh_credentials", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.refresh_credentials", "kind": "function", "doc": "<p>Refreshes the credentials.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.get_auth_url", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.get_auth_url", "kind": "function", "doc": "<p>Retrieves the authorization URL.</p>\n\n<p>Returns:\n    Tuple[str, str]: The authorization URL and the state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.get_credentials_from_request", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.get_credentials_from_request", "kind": "function", "doc": "<p>Retrieves the credentials from the authorization response.</p>\n\n<p>Args:\n    request (Request): The HTTP request object containing the authorization response.</p>\n\n<p>Returns:\n    Credentials: The credentials object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">starlette</span><span class=\"o\">.</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Request</span></span><span class=\"return-annotation\">) -> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">oauth2</span><span class=\"o\">.</span><span class=\"n\">credentials</span><span class=\"o\">.</span><span class=\"n\">Credentials</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.authenticaion_service.AuthenticationService.save_credentials", "modulename": "src.speaker.gmail.authenticaion_service", "qualname": "AuthenticationService.save_credentials", "kind": "function", "doc": "<p>Saves the credentials to the token file.</p>\n\n<p>Args:\n    credentials (Credentials): The credentials object to be saved.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">credentials</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">oauth2</span><span class=\"o\">.</span><span class=\"n\">credentials</span><span class=\"o\">.</span><span class=\"n\">Credentials</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.connector", "modulename": "src.speaker.gmail.connector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.connector.logger", "modulename": "src.speaker.gmail.connector", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger", "default_value": "&lt;Logger src.speaker.gmail.connector (INFO)&gt;"}, {"fullname": "src.speaker.gmail.connector.GmailConnector", "modulename": "src.speaker.gmail.connector", "qualname": "GmailConnector", "kind": "class", "doc": "<p>A class that represents a connector to Gmail.</p>\n\n<p>This class provides methods to interact with Gmail API, such as refreshing authentication,\nretrieving the latest message from the trash, and retrieving the latest message from the inbox\nand moving it to the bin.</p>\n"}, {"fullname": "src.speaker.gmail.connector.GmailConnector.authentication_service", "modulename": "src.speaker.gmail.connector", "qualname": "GmailConnector.authentication_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.connector.GmailConnector.refresh_authentication", "modulename": "src.speaker.gmail.connector", "qualname": "GmailConnector.refresh_authentication", "kind": "function", "doc": "<p>Refreshes the authentication credentials.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.connector.GmailConnector.get_latest_message_from_trash", "modulename": "src.speaker.gmail.connector", "qualname": "GmailConnector.get_latest_message_from_trash", "kind": "function", "doc": "<p>Retrieves the latest message from the trash.</p>\n\n<p>Returns:\n    The latest message from the trash.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.connector.GmailConnector.get_latest_message_and_move_to_bin", "modulename": "src.speaker.gmail.connector", "qualname": "GmailConnector.get_latest_message_and_move_to_bin", "kind": "function", "doc": "<p>Retrieves the latest message from the inbox and moves it to the bin.</p>\n\n<p>Returns:\n    The latest message from the inbox.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.gmail", "modulename": "src.speaker.gmail.gmail", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.gmail.logger", "modulename": "src.speaker.gmail.gmail", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger", "default_value": "&lt;Logger src.speaker.gmail.gmail (INFO)&gt;"}, {"fullname": "src.speaker.gmail.gmail.Gmail", "modulename": "src.speaker.gmail.gmail", "qualname": "Gmail", "kind": "class", "doc": "<p>A class representing a Gmail client.</p>\n\n<p>This class provides methods to interact with Gmail API and retrieve the latest email message.</p>\n"}, {"fullname": "src.speaker.gmail.gmail.Gmail.get_latest_message", "modulename": "src.speaker.gmail.gmail", "qualname": "Gmail.get_latest_message", "kind": "function", "doc": "<p>Retrieves the latest email message and returns its content as a string.</p>\n\n<p>Returns:\n    str: The content of the latest email message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.gmail_config", "modulename": "src.speaker.gmail.gmail_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.gmail_config.GmailConfig", "modulename": "src.speaker.gmail.gmail_config", "qualname": "GmailConfig", "kind": "class", "doc": "<p>Configuration class for Gmail integration.</p>\n"}, {"fullname": "src.speaker.gmail.gmail_config.GmailConfig.callbackRoute", "modulename": "src.speaker.gmail.gmail_config", "qualname": "GmailConfig.callbackRoute", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/oauth2-callback&#x27;"}, {"fullname": "src.speaker.gmail.gmail_config.GmailConfig.secrets_file", "modulename": "src.speaker.gmail.gmail_config", "qualname": "GmailConfig.secrets_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;credentials.json&#x27;"}, {"fullname": "src.speaker.gmail.gmail_config.GmailConfig.token_path", "modulename": "src.speaker.gmail.gmail_config", "qualname": "GmailConfig.token_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path", "default_value": "PosixPath(&#x27;token_gmail.json&#x27;)"}, {"fullname": "src.speaker.gmail.gmail_config.GmailConfig.scopes", "modulename": "src.speaker.gmail.gmail_config", "qualname": "GmailConfig.scopes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]", "default_value": "[&#x27;https://mail.google.com/&#x27;]"}, {"fullname": "src.speaker.gmail.gmail_config.GmailConfig.host", "modulename": "src.speaker.gmail.gmail_config", "qualname": "GmailConfig.host", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;localhost&#x27;"}, {"fullname": "src.speaker.gmail.gmail_config.GmailConfig.port", "modulename": "src.speaker.gmail.gmail_config", "qualname": "GmailConfig.port", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;8000&#x27;"}, {"fullname": "src.speaker.gmail.gmail_config.GmailConfig.redirect_uri", "modulename": "src.speaker.gmail.gmail_config", "qualname": "GmailConfig.redirect_uri", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;http://localhost:8000/gmail/oauth2-callback&#x27;"}, {"fullname": "src.speaker.gmail.gmail_message_parser", "modulename": "src.speaker.gmail.gmail_message_parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.gmail_message_parser.logger", "modulename": "src.speaker.gmail.gmail_message_parser", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.gmail.gmail_message_parser (INFO)&gt;"}, {"fullname": "src.speaker.gmail.gmail_message_parser.GmailMessageParser", "modulename": "src.speaker.gmail.gmail_message_parser", "qualname": "GmailMessageParser", "kind": "class", "doc": "<p>A class that parses Gmail messages and extracts relevant information.</p>\n\n<p>Methods:\n    parse_message(message) -> Document: Parses a Gmail message and returns a Document object.</p>\n"}, {"fullname": "src.speaker.gmail.gmail_message_parser.GmailMessageParser.parse_message", "modulename": "src.speaker.gmail.gmail_message_parser", "qualname": "GmailMessageParser.parse_message", "kind": "function", "doc": "<p>Parses a Gmail message and returns a Document object.</p>\n\n<p>Args:\n    message: The Gmail message to be parsed.</p>\n\n<p>Returns:\n    Document: The parsed document containing the extracted content and metadata.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">) -> <span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.gmail_reader", "modulename": "src.speaker.gmail.gmail_reader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.gmail_reader.logger", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.gmail.gmail_reader (INFO)&gt;"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader", "kind": "class", "doc": "<p>GmailReader class for loading and interacting with Gmail messages.</p>\n\n<p>Args:\n    query (str): The query string used to filter the emails.\n    credentials (Credentials): The credentials used to authenticate the Gmail API.</p>\n"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader.__init__", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">credentials</span><span class=\"p\">:</span> <span class=\"n\">google</span><span class=\"o\">.</span><span class=\"n\">oauth2</span><span class=\"o\">.</span><span class=\"n\">credentials</span><span class=\"o\">.</span><span class=\"n\">Credentials</span></span>)</span>"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader.query", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader.query", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader.credentials", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader.credentials", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader.gmail_message_parser", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader.gmail_message_parser", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader.service", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader.service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader.load_data", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader.load_data", "kind": "function", "doc": "<p>Load emails from the user's account.</p>\n\n<p>Returns:\n    List[Document]: A list of Document objects representing the loaded emails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader.get_message", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader.get_message", "kind": "function", "doc": "<p>Get a Message with given ID.</p>\n\n<p>Args:\n    msg_id (str): The ID of the message to retrieve.</p>\n\n<p>Returns:\n    Document: The Document object representing the retrieved message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.gmail_reader.GmailReader.move_to_bin", "modulename": "src.speaker.gmail.gmail_reader", "qualname": "GmailReader.move_to_bin", "kind": "function", "doc": "<p>Move a Message with given ID to the bin.</p>\n\n<p>Args:\n    msg_id (str): The ID of the message to move to the bin.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.router", "modulename": "src.speaker.gmail.router", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.gmail.router.router", "modulename": "src.speaker.gmail.router", "qualname": "router", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;fastapi.routing.APIRouter object&gt;"}, {"fullname": "src.speaker.gmail.router.logger", "modulename": "src.speaker.gmail.router", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.gmail.router (INFO)&gt;"}, {"fullname": "src.speaker.gmail.router.get_auth_url", "modulename": "src.speaker.gmail.router", "qualname": "get_auth_url", "kind": "function", "doc": "<p>Get the authentication URL for Gmail integration.</p>\n\n<p>Args:\n    response (Response): The response object.</p>\n\n<p>Returns:\n    str: The authentication URL.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">starlette</span><span class=\"o\">.</span><span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">Response</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.router.callback", "modulename": "src.speaker.gmail.router", "qualname": "callback", "kind": "function", "doc": "<p>Callback function for Gmail integration.</p>\n\n<p>Args:\n    request (Request): The incoming request object.\n    response (Response): The response object.</p>\n\n<p>Returns:\n    str: A success message indicating that the credentials were successfully saved.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">starlette</span><span class=\"o\">.</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Request</span>,</span><span class=\"param\">\t<span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">starlette</span><span class=\"o\">.</span><span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">Response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.gmail.router.get_latest_mesage", "modulename": "src.speaker.gmail.router", "qualname": "get_latest_mesage", "kind": "function", "doc": "<p>Get the latest message from Gmail.</p>\n\n<p>Args:\n    response (Response): The response object.</p>\n\n<p>Returns:\n    str: The latest message from Gmail.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">starlette</span><span class=\"o\">.</span><span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">Response</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.speaker", "modulename": "src.speaker.speaker", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.speaker.logger", "modulename": "src.speaker.speaker", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.speaker (INFO)&gt;"}, {"fullname": "src.speaker.speaker.Speaker", "modulename": "src.speaker.speaker", "qualname": "Speaker", "kind": "class", "doc": "<p>Represents a speaker that generates random lines and reacts to email messages.</p>\n"}, {"fullname": "src.speaker.speaker.Speaker.__init__", "modulename": "src.speaker.speaker", "qualname": "Speaker.__init__", "kind": "function", "doc": "<p>Initializes a Speaker instance with the given configuration.</p>\n\n<p>Args:\n    config (SpeakerConfig): The configuration for the speaker.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">speaker_config</span><span class=\"o\">.</span><span class=\"n\">SpeakerConfig</span></span>)</span>"}, {"fullname": "src.speaker.speaker.Speaker.generate_random_lines", "modulename": "src.speaker.speaker", "qualname": "Speaker.generate_random_lines", "kind": "function", "doc": "<p>Generates random lines for the speaker.</p>\n\n<p>Returns:\n    tuple[str, str]: A tuple containing the generated lines and the path to the generated speech file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.speaker.Speaker.react_to_email_message", "modulename": "src.speaker.speaker", "qualname": "Speaker.react_to_email_message", "kind": "function", "doc": "<p>Reacts to the latest email from fans.</p>\n\n<p>Returns:\n    tuple[str, str]: A tuple containing the speaker's reaction to the email and the path to the generated speech file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.speaker_router", "modulename": "src.speaker.speaker_router", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.speaker_router.logger", "modulename": "src.speaker.speaker_router", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.speaker_router (INFO)&gt;"}, {"fullname": "src.speaker.speaker_router.router", "modulename": "src.speaker.speaker_router", "qualname": "router", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;fastapi.routing.APIRouter object&gt;"}, {"fullname": "src.speaker.speaker_router.get_speaker_lines", "modulename": "src.speaker.speaker_router", "qualname": "get_speaker_lines", "kind": "function", "doc": "<p>Get the speaker lines generated by the first channel's content creator.</p>\n\n<p>Returns:\n    list: The speaker lines generated by the content creator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.speaker_router.react_to_email_message", "modulename": "src.speaker.speaker_router", "qualname": "react_to_email_message", "kind": "function", "doc": "<p>Reacts to an email message and returns the lines of the response.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech", "modulename": "src.speaker.text_to_speech", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.text_to_speech.config", "modulename": "src.speaker.text_to_speech.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig", "kind": "class", "doc": "<p>Configuration class for text-to-speech settings.</p>\n"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.audio_data_dir", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.audio_data_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/home/yan/radio-ai/radio/audio_data&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.samples_dir", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.samples_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/home/yan/radio-ai/radio/audio_data/samples&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.generated_dir", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.generated_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/home/yan/radio-ai/radio/audio_data/generated&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.sample_filename_1", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.sample_filename_1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/home/yan/radio-ai/radio/audio_data/samples/sample-1.mp3&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.sample_filename_2", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.sample_filename_2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/home/yan/radio-ai/radio/audio_data/samples/sample-2.mp3&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.generated_voice_filename", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.generated_voice_filename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/home/yan/radio-ai/radio/audio_data/generated/text.mp3&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.output_filename", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.output_filename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/home/yan/radio-ai/radio/audio_data/generated/out.mp3&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.broadcast_dir", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.broadcast_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;/home/yan/radio-ai/radio/audio_data/generated/broadcast&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.elevenlabs_api_key", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.elevenlabs_api_key", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;1c9d7736e99cb9139984e696e53d1999&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.voice", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.voice", "kind": "variable", "doc": "<p>Available voices: <a href=\"https://pyttsx3.readthedocs.io/en/latest/engine.html#pyttsx3.voice.Voice\">https://pyttsx3.readthedocs.io/en/latest/engine.html#pyttsx3.voice.Voice</a></p>\n", "annotation": ": str", "default_value": "&#x27;english&#x27;"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.rate", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "200"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.volume", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.volume", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "1.0"}, {"fullname": "src.speaker.text_to_speech.config.TextToSpeechConfig.elevenlabs_voice_id", "modulename": "src.speaker.text_to_speech.config", "qualname": "TextToSpeechConfig.elevenlabs_voice_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;TX3LPaxmHKxFdv7VOQHJ&#x27;"}, {"fullname": "src.speaker.text_to_speech.interface", "modulename": "src.speaker.text_to_speech.interface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.text_to_speech.interface.logger", "modulename": "src.speaker.text_to_speech.interface", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.text_to_speech.interface (INFO)&gt;"}, {"fullname": "src.speaker.text_to_speech.interface.TextToSpeechInterface", "modulename": "src.speaker.text_to_speech.interface", "qualname": "TextToSpeechInterface", "kind": "class", "doc": "<p>Interface for text-to-speech functionality.</p>\n"}, {"fullname": "src.speaker.text_to_speech.interface.TextToSpeechInterface.text_to_speech", "modulename": "src.speaker.text_to_speech.interface", "qualname": "TextToSpeechInterface.text_to_speech", "kind": "function", "doc": "<p>Converts the given text to speech.</p>\n\n<p>Args:\n    text (str): The text to be converted.</p>\n\n<p>Returns:\n    str: File path to the generated speech file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.interface.TextToSpeechInterface.get_TTS_driver_name", "modulename": "src.speaker.text_to_speech.interface", "qualname": "TextToSpeechInterface.get_TTS_driver_name", "kind": "function", "doc": "<p>Returns the name of the text-to-speech driver.</p>\n\n<p>Returns:\n    str: The name of the driver.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.interface.TextToSpeechInterface.get_TTS_voice_name", "modulename": "src.speaker.text_to_speech.interface", "qualname": "TextToSpeechInterface.get_TTS_voice_name", "kind": "function", "doc": "<p>Returns the name of the text-to-speech voice.</p>\n\n<p>Returns:\n    str: The name of the voice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.service_implementation", "modulename": "src.speaker.text_to_speech.service_implementation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine", "modulename": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine.logger", "modulename": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.text_to_speech.service_implementation.pyttsx3_engine (INFO)&gt;"}, {"fullname": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine.PyTTSx3Engine", "modulename": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine", "qualname": "PyTTSx3Engine", "kind": "class", "doc": "<p>PyTTSx3Engine is a class that provides text-to-speech functionality using the pyttsx3 library.</p>\n"}, {"fullname": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine.PyTTSx3Engine.__init__", "modulename": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine", "qualname": "PyTTSx3Engine.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">voice</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">rate</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">volume</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine.PyTTSx3Engine.text_to_speech", "modulename": "src.speaker.text_to_speech.service_implementation.pyttsx3_engine", "qualname": "PyTTSx3Engine.text_to_speech", "kind": "function", "doc": "<p>Converts the given text to speech and saves the resulting audio file in the specified output directory.</p>\n\n<p>Args:\n    text (str): The text to convert to speech.\n    output_dir (str): The directory where the audio file should be saved.</p>\n\n<p>Returns:\n    str: The path to the saved audio file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs.logger", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs (INFO)&gt;"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs.TextToSpeechElevenLabs", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs", "qualname": "TextToSpeechElevenLabs", "kind": "class", "doc": "<p>Interface for text-to-speech functionality.</p>\n", "bases": "src.speaker.text_to_speech.interface.TextToSpeechInterface"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs.TextToSpeechElevenLabs.__init__", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs", "qualname": "TextToSpeechElevenLabs.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">voice_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;TX3LPaxmHKxFdv7VOQHJ&#39;</span></span>)</span>"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs.TextToSpeechElevenLabs.text_to_speech", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs", "qualname": "TextToSpeechElevenLabs.text_to_speech", "kind": "function", "doc": "<p>Converts the given text to speech.</p>\n\n<p>Args:\n    text (str): The text to be converted.</p>\n\n<p>Returns:\n    str: File path to the generated speech file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs.TextToSpeechElevenLabs.get_TTS_driver_name", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs", "qualname": "TextToSpeechElevenLabs.get_TTS_driver_name", "kind": "function", "doc": "<p>Returns the name of the text-to-speech driver.</p>\n\n<p>Returns:\n    str: The name of the driver.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;elevenlabs&#39;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs.TextToSpeechElevenLabs.get_TTS_voice_name", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_elevenlabs", "qualname": "TextToSpeechElevenLabs.get_TTS_voice_name", "kind": "function", "doc": "<p>Returns the name of the text-to-speech voice.</p>\n\n<p>Returns:\n    str: The name of the voice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3.logger", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3 (INFO)&gt;"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3.TextToSpeechPyttsx3", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3", "qualname": "TextToSpeechPyttsx3", "kind": "class", "doc": "<p>A class that implements the TextToSpeechInterface using pyttsx3 library.</p>\n\n<p>Args:\n    output_dir (str): The directory where the generated speech files will be saved.\n    voice (str, optional): The voice to be used for text-to-speech conversion. Defaults to \"english\".</p>\n", "bases": "src.speaker.text_to_speech.interface.TextToSpeechInterface"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3.TextToSpeechPyttsx3.__init__", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3", "qualname": "TextToSpeechPyttsx3.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">voice</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;english&#39;</span></span>)</span>"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3.TextToSpeechPyttsx3.text_to_speech", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3", "qualname": "TextToSpeechPyttsx3.text_to_speech", "kind": "function", "doc": "<p>Convert the given text to speech.</p>\n\n<p>Args:\n    text (str): The text to be converted to speech.</p>\n\n<p>Returns:\n    str: The path of the generated speech file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3.TextToSpeechPyttsx3.get_TTS_driver_name", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3", "qualname": "TextToSpeechPyttsx3.get_TTS_driver_name", "kind": "function", "doc": "<p>Get the name of the text-to-speech driver.</p>\n\n<p>Returns:\n    Literal[\"pyttsx3\"]: The name of the text-to-speech driver.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;pyttsx3&#39;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3.TextToSpeechPyttsx3.get_TTS_voice_name", "modulename": "src.speaker.text_to_speech.service_implementation.text_to_speech_pyttsx3", "qualname": "TextToSpeechPyttsx3.get_TTS_voice_name", "kind": "function", "doc": "<p>Get the name of the current voice used for text-to-speech conversion.</p>\n\n<p>Returns:\n    str: The name of the current voice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();
